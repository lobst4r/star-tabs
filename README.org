#+TITLE: Star Tabs
#+AUTHOR: Robin Westerlund

* Installation

1. Clone repository:

~git clone --single-branch --branch master https://github.com/lobst4r/star-tabs.git~

2. Add star-tabs.el to your Emacs load path.
3. In your .emacs configuration file, add: 
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'star-tabs)

(star-tabs-tab-bar-mode t)
#+END_SRC


** Prerequisites
- Emacs 26.1+
- OPTIONAL: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

** Example Configuration 
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'star-tabs)
(star-tabs-tab-bar-mode t)

;; Create a collection
(star-tabs-create-filter-collection
  :name "my-collection"
  :use t
  :enable-file-extension-filters nil 
  :file-extension-filter-threshold 15
  :hide-close-buttons t
  :display-filter-name nil)

;; Add filters
(star-tabs-add-filter
  :name 'default
  :exclude '("^[[:space:]]" "^*.*\\*$" "^magit-" "^magit:")
  :collection-name 'my-collection)

;; Keybinds
(define-key evil-normal-state-map (kbd "RET") 'star-tabs-switch-to-buffer)
(define-key evil-normal-state-map (kbd "`") 'star-tabs-cycle-filters)
(define-key evil-normal-state-map (kbd "C-a C-r") 'star-tabs-include-current-buffer-in-current-filter)
(define-key evil-normal-state-map (kbd "C-a C-t") 'star-tabs-exclude-current-buffer-from-current-filter)
(define-key evil-normal-state-map (kbd "C-a C-j") 'star-tabs-scroll-tab-bar-backward)
(define-key evil-normal-state-map (kbd "C-a C-k") 'star-tabs-scroll-tab-bar-forward)
(define-key evil-normal-state-map (kbd "C-a C-h") 'star-tabs-move-tab-left)
(define-key evil-normal-state-map (kbd "C-a C-l") 'star-tabs-move-tab-right)
#+END_SRC

* Introduction
Star Tabs aims to be a highly customizable and functional tab bar solution for Emacs, with focus on efficient and fast buffer navigation using numbers to
identify tabs. In the normal case, switching to any buffer is only 2-4 keystrokes away (its true power is unleashed in evil-mode!), and tabs can easily be arranged and displayed to your needs. 

* Features
- Group and filter buffers however you want using regular expressions (or just use the default configuration).
- Identify tabs by numbers, and switch buffer to any buffer with ease.
- Switch between groups/filters easily.
- Customize the look and feel of the tab bar.
- Optional icon support using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
- Full mouse support (if you really need it). 
- Add and exclude any buffer to/from any group/filter.

* Usage
Most navigation in Star Tabs can be done with only two commands: ~star-tabs-cycle-filters~ and ~star-tabs-switch-to-buffer~.
Thus, it's probably a good idea to bind these two functions to easy-to-access keys, and as few keys as possible in case you use keychords.
I personally use ~`~ for ~star-tabs-cycle-filters~ and ~RET~ for ~star-tabs-switch-to-buffer~ in evil normal mode.

** Usage Examples

*** Switch buffer the Star Tabs way
1. Find the tab that corresponds to the buffer you want to switch to.
   - If the buffer is in the tab bar, but not visible, scroll the tab bar using ~star-tabs-scroll-tab-bar-forward~ or ~star-tabs-scroll-tab-bar-backward~.
   - If the buffer is not in the current group, cycle groups/filters using ~star-tabs-cycle-filters~ until you find a group with the buffer. 
2. Switch buffer: 
   - For non-evil-mode users, press ~C-u~ or ~M-~ followed by the number of the tab, and then the key to which ~star-tabs-switch-to-buffer~ is bound to.
   - For evil-mode users, type the number of the tab, and then the key to which ~star-tabs-switch-to-buffer~ is bound to.
3. You have now switched buffer!

*** Change the order of tabs 
Do you want a tab to be next to another tab, or perhaps simply wish it had a different number? Then it sounds like you want to change the ordering.
Here's one way to do it:
1. Switch to the buffer corresponding to tab you want to move.
2. Make sure you are in the tab bar in which you would like to change its position
   - Note that changing the position of a tab in one group might currently affect its position in other groups;
     this is due to how the ordering of the buffers works at the present.
3. Move the tab right or left in the tab bar using the functions ~star-tabs-move-tab-right~ and ~star-tabs-move-tab-left~ respectively. 
   - Moving the last tab in the tab bar to the right will move it back to the beginning, like a cycle.
   - Similarily, moving the first tab in the tab bar to the left will move it to the end.


** Commands
| Command                                                    | Description                                                                                                 |
|------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
| ~star-tabs-cycle-filters~                                  | Cycle through groups/filters                                                                                |
| ~star-tabs-switch-to-buffer~                               | Switch to buffer associated with tab N (N is the prefix argument that follows command ~C-u~).               |
| ~star-tabs-find-active-filter~                             | Find and display a filter for the currently active buffer, if such filter exists in the current collection. |
| ~star-tabs-include-current-buffer-in-current-filter~       | Always display current buffer in the currently active group/filter.                                         |
| ~star-tabs-exclude-current-buffer-from-current-filter~     | Hide current buffer in the currently active group/filter.                                                   |
| ~star-tabs-print-active-filter-name~                       | Output the active group/filter name as a message.                                                           |
| ~star-tabs-clear-cached-buffers~                           | Clear the cached filtered buffers. Use this command after making changes to the global filter.              |
| ~star-tabs-cycle-filter-collections~                       | Cycle through group/filter collections.                                                                     |
| ~star-tabs-scroll-tab-bar-forward~                         | Scroll tab bar forward (2 tabs at a time by default).                                                       |
| ~star-tabs-scroll-tab-bar-backward~                        | Scroll tab bar backward (2 tabs at a time by default).                                                      |
| ~star-tabs-kill-all-buffers-in-filter~                     | Kill all buffers in the active filter group.                                                                |
| ~star-tabs-kill-all-unmodified-buffers-in-filter~          | Kill all unmodified buffers in the active filter group.                                                     |
| ~star-tabs-kill-all-inactive-buffers-in-filter~            | Kill all buffers in the active filter group that aren't shown in a window.                                  |
| ~star-tabs-kill-all-unmodified-inactive-buffers-in-filter~ | Kill all unmodifed buffers in the active filter group that aren't shown in a window.                        |
| ~star-tabs-move-tab-right~                                 | Move the current tab one step to the right in the tab bar.                                                  |
| ~star-tabs-move-tab-left~                                  | Move the current tab one step to the left in the tab bar.                                                   |
| ~star-tabs-move-current-tab-to-first~                      | Move the current buffer to the first tab in the tab bar.                                                    |
|                                                            |                                                                                                             |

* Customization 
** Global Settings
You can change the visual aspects of Star Tabs by altering these global settings.
Most functional settings are done on a collection-level scope, but there are still some functional settings that either must or can be set globally.
Most values shown in the examples below are default values.

*IMPORTANT: These commands should be added to your .emacs configuration file, since you will need to restart Emacs for most of the visual changes to take effect.*

*** Colors  
#+BEGIN_SRC emacs-lisp :tangle yes
;; Foreground color for tab bar filter name.
(setq star-tabs-tab-bar-filter-name-foreground "#ef21b3")

;; Background color for selected tab.
(setq star-tabs-tab-bar-selected-background "#202020")

;; Foreground color for selected tab.
(setq star-tabs-tab-bar-selected-foreground "#a3c9e7")
  
;; Background color for non-selected tabs.
(setq star-tabs-tab-bar-non-selected-background "#262626")

;; Foreground color for non-selected tabs.
(setq star-tabs-tab-bar-non-selected-foreground "#e1e1e1")
#+END_SRC

*** Size
#+BEGIN_SRC emacs-lisp :tangle yes
;; Height of the tab bar.
(setq star-tabs-tab-bar-height 220)

;; Text height for tabs.
(setq star-tabs-tab-bar-text-height 150)
#+END_SRC

*** Dividers 
#+BEGIN_SRC emacs-lisp :tangle yes
;; Space used to the left of the tab bar.
(setq star-tabs-left-margin "  ")

;; Space used to the right of the tab bar. Deprecated?
(setq star-tabs-right-margin " ")

;; Tab bar divider that separates tabs.
(setq star-tabs-tab-separator " ")

;; Tab bar divider that separates the buffer number and buffer name in a tab.
(setq star-tabs-number-name-separator " ")

;; Tab bar divider that separates the buffer name and modified icon in a tab.
(setq star-tabs-name-modified-icon-separator " ")

;; Tab bar divider that separates the modified icon and close button in a tab.
(setq star-tabs-modified-icon-close-button-separator " ")

;; Tab bar divider that separates the name of the active filter group and the first tab.
(setq  star-tabs-filter-name-number-separator "   ")
#+END_SRC

*** Tab ASCII Icons
#+BEGIN_SRC emacs-lisp :tangle yes
;; Tab 'icon' for modified buffers.
(setq star-tabs-modified-buffer-icon "*")

;; Tab 'icon' for unmodified buffers.
(setq star-tabs-unmodified-buffer-icon "+")
  
;; Tab 'icon' for the tab close button.
(setq star-tabs-close-buffer-icon "x") 
#+END_SRC

*** Global Filter Settings
#+BEGIN_SRC emacs-lisp :tangle yes
;; List of buffer name prefixes to be included globally. Buffers filtered this way will be cached and ignored
;; for all future searches. As such, global filtering may increase performance, and
;; should (and should only!) be applied to buffers that you really don't care about.
;; Buffers with the space prefix (\" \") are automatically filtered before this filter is applied, and thus cannot  
;; be included.
;; This filter is applied before star-tabs-global-exclusion-prefix-filter.
(setq star-tabs-global-inclusion-prefix-filter nil)

;; List of buffer name prefixes to be excluded globally. Buffers filtered this way will be cached and ignored
;; for all future searches. As such, global filtering may increase performance, and
;; should (and should only!) be applied to buffers that you really don't care about.
;; Buffers with the space prefix (\" \") are automatically filtered before this filter is applied, and thus need not
;; be added to this list.
;; This filter is applied after star-tabs-global-inclusion-prefix-filter.
(setq star-tabs-global-exclusion-prefix-filter '("magit-" "magit:" "*Help" "*WoM")
#+END_SRC

** Collections
A collection is a bunch (a group, if you will) of groups/filters. Most customization in Star Tabs is done by setting the properties of a collection.
There is no hard limit on how many collections you can create, but realistically you probably won't be using more than one or two for a project. 

In order to create a filter, run this code, or add it to your .emacs configuration file:
#+BEGIN_SRC emacs-lisp :tangle yes
(star-tabs-create-filter-collection
  :name "my-collection"
  :use t
  :enable-file-extension-filters t 
  :file-extension-filter-threshold 0
  :hide-close-buttons t
  :display-filter-name t)
#+END_SRC

*** Collection Properties
| Property                                 | Description                                                                                                                                                                                           |
|------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~:name (string)~                         | The name of the collection                                                                                                                                                                            |
| ~:enable-file-extension-filters (bool)~  | If ~t~, add file extension filters to the collection                                                                                                                                                  |
| ~:file-extension-filter-threshold (int)~ | If greater than ~0~, and if ~:enable-file-extension-filters~ is ~nil~, add file extension filters to the collection if the total number of real buffers reaches or exceeds the value of the property. |
| ~:hide-close-buttons (bool)~             | If ~non-nil~, hide the tab close button icons.                                                                                                                                                        |
| ~:display-filter-name (bool)~            | If ~non-nil~, always display the name of the filter/group left of the tabs in the tab bar. Otherwise, only display the filter/group name temporarily when switching filters/groups                    |
| ~:use (bool)~                            | If ~non-nil~, switch to the collection upon creation.                                                                                                                                                 |
| ~:disable-scroll-to-filter (bool)~       | If ~nil~ (default), go to beginning of next group, or end of previous group in the tab bar "scrolling past the edge".                                                                              |
|                                          |                                                                                                                                                                                                       |

** Filters
A filter is a list, or multiple lists, of regular expressions used to include or exclude (or both include and exclude) buffers with names that match the regular expressions.
In case both ~:include~ and ~:exclude~ are set, first include buffers using the regular expressions from ~:include~, then from those buffers, exclude buffers using the list from ~:exclude~

| Property                                              | Description                                                                                                                                   |
|-------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------|
| ~:name (symbol...TODO: change to string?)~            | Name of the filter.                                                                                                                           |
| ~:exclude  (list of regexps)~                         | List of regular expressions. Any buffer with a name matched by a regexp in this list will be excluded from the group.                         |
| ~:include (list of regexps)~                          | List of regular expressions. Any buffer with a name matched by a regexp in this list will be included in the group.                           |
| ~:always-include (regexp)~                            | Buffers matching this regular expression will always be included in the group, even if they were excluded by the list specified in ~:exclude~ |
| ~:collection-name (symbol...TODO: change to string?)~ | The name of the collection the filter should be added to. If not set, it defaults to ~(star-tabs-active-filter-collection-name)~              |
| ~:auto-sort (symbol)~                                 | Automatically sort the filter group. For more info about the available sorting methods, refer to the section on sorting                       |
|                                                       |                                                                                                                                               |

** Sorting/Reordering tabs
Automatic sorting of tabs can be done by setting the ~:auto-sort~ option in the filter group. By default, automatic sorting is diabled
(tabs will reflect the order in which the buffers were created, however).
*Note that currently, reordering of tabs in one group might affect ordering in other groups if the same buffers are in multiple groups.*

The available sorting methods are as follows:

| Sorting Method | Description                                                                                                                                                                                                    |
|----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 'recent-first  | The most recent (current) buffer will be the first (left-most) tab. The second most recent will be the second tab, and so on. The last (right-most) tab will thus be the buffer to last be revisited/reopened. |
| nil            | No sorting will be applied, but any sorting done previously will remain in effect.                                                                                                             |

*** Enable/Disable automatic sorting/Change sorting method 
To enable automatic sorting in the active filter group, or to change sorting method, use the following command:
#+BEGIN_SRC emacs-lisp
(star-tabs-set-filter-prop-value :auto-sort 'sorting-method) ; change "sorting-method" to the name of the sorting method you would like to use.
#+END_SRC

Automatic sorting can also be enabled when creating a filter group:
#+BEGIN_SRC emacs-lisp
(star-tabs-add-filter
  :name 'my-filter
  :exclude '("^[[:space:]]" "^*.*\\*$") 
  :auto-sort 'recent-first) ; :auto-sort is nil by default
#+END_SRC

To disable automatic sorting in the active filter group, use the following command:
#+BEGIN_SRC emacs-lisp
(star-tabs-set-filter-prop-value :auto-sort nil) 
#+END_SRC



* Questions and Answers

** There are unwanted/strange tabs in my tab bar. How do I hide them?
First, make sure you are in the correct tab group/filter. You can see the name of the currently active filter using command:
#+BEGIN_SRC emacs-lisp :tangle yes
M-x star-tabs-active-filter-name
#+END_SRC

If you're in the wrong group/filter, cycle filters using the following command until you find the correct filter:
#+BEGIN_SRC emacs-lisp :tangle yes
M-x star-tabs-cycle-filters
#+END_SRC

If you're in the correct group/filter and you want to hide a tab, open the buffer of the tab you want to hide and run the command:
#+BEGIN_SRC emacs-lisp :tangle yes
M-x star-tabs-exclude-current-buffer-from-current-filter
#+END_SRC
This will hide the buffer from the current group/filter.

Alternatively you can run the following elisp command, specifying the buffer name and filter name yourself:
#+BEGIN_SRC emacs-lisp :tangle yes
(star-tabs-exclude-from-filter (get-buffer buffer-name) filter-name)
#+END_SRC

** How do I enable/disable groups for file extensions?
To add groups for file extensions for the current collection, run the following code, or add it to your emacs configuration file:
#+BEGIN_SRC emacs-lisp :tangle yes
(star-tabs-set-filter-collection-prop-value :enable-file-extension-filters t)
#+END_SRC

To remove groups for file extensions for the current collection, run the following code, or add it to your emacs configuration file:
#+BEGIN_SRC emacs-lisp :tangle yes
(star-tabs-set-filter-collection-prop-value :enable-file-extension-filters nil)
#+END_SRC

Alternatively, you can enable file extension filters only when the total number of real buffers reaches or exceeds a certain threshold.
This can be useful if you want as few groups as possible when you don't have a lot of active buffers, but want to mitigate some of the disorganization
that might follow a growing number of buffers. To do this, run the following code or add it to your emacs configuration file:
#+BEGIN_SRC emacs-lisp :tangle yes
(star-tabs-set-filter-collection-prop-value :enable-file-extension-filters nil) ; This must be nil when using threshold.
(star-tabs-set-filter-collection-prop-value :file-extension-filter-threshold 15)
#+END_SRC

If you have disabled file extension filters by setting the property ~:enable-file-extension-filters~ to ~nil~, but they are still showing,
make sure ~:file-extension-filter-threshold~ is set to ~0~ as well.

** Is this a fork of an existing project?
No. Although there are other good projects that accomplish similar things, I chose to start from scratch because this is a relatively small project and
I needed something to familiarize myself more with elisp.

** Is Star Tabs useful for someone with hundreds of open buffers?
Potentially. Tabs become less efficient and less useful the more there are, so you probably want to minimize the number of tabs and groups.
Even though you have hundreds of open buffers, you can customize Star Tabs to only show the ones you want, and in which groups you want using filters,
so you might only end up with one or two groups with just a handful of tabs in each. The possibilities are endless!

That being said, Star Tabs is not a complete solution that is going work efficiently in all cases for everybody.

** Star Tabs is slowing down Emacs. Why?
In case you are experiencing slow-downs, it is likely because of conflicts or poor interactions with other extensions. 
More specifically, Star Tabs is set to update or refresh on certain triggers. Among those triggers are switching between, and creating, buffers.
It's common for extensions to use their own buffers to do things in the background, and they are usually of no interest to the user.
Although I've done my best to identify and tell Star Tabs to ignore these unreal buffers, some extension won't follow the normal naming conventions, 
which means the buffers have to be manually identified.

There may of course be other reasons for the slow-down, but it will likely still have something to do with excessive refreshing of the tab bar 
(countless of hours spent debugging has taught me this...). To help bring more clarity into what may be the root of the problem, one good place
to start is by activating the debug messages:

#+BEGIN_SRC emacs-lisp
(setq star-tabs-debug-messages t)   ; Set to nil to deactivate debug messages
#+END_SRC

A message will be displayed every time the tab bar refreshes, explaining what caused the refresh, along with the name of the buffer the refresh
took place in.

If you notice an odd buffer name here, chances are that it is the cause. What you want to do now is tell Star Tabs to ignore it, which
is done by adding the name (or a prefix by which you can identify it) to the global exclusion list:

#+BEGIN_SRC emacs-lisp
(add-to-list 'star-tabs-global-exclusion-prefix-filter "magit" t)
(star-tabs-clear-cached-buffers) ; Clear cache just to be safe
#+END_SRC

In the above example, we told Star Tabs to ignore all buffers with a name starting with "magit".

If you identify extensions causing problems with Star Tabs, please leave a bug report.

  
** What's the difference between a filter and a group?
I use the terms filters and groups somewhat interchangeably when talking about a group of tabs. At the current state of development, all groups
of tabs are created and defined using filters, and that's why I refer to them both as filters and groups, or groups/filters. In the future,
the distinction will be more clear (and there should then be no need for this question).

** How can I contribute to Star Tabs?
We all customize Emacs to our own needs and preferences. Star Tabs was created mainly for my own personal use in mind and, although care has been taken to ensure compatability with other people's configurations and styles, there are undoubtedly things you would like done differently.
As such, I'd love to know about any bugs and compatability issues you might find, as well as things - big and small - that could be improved.
To learn about how you can help improve Star Tabs, please refer to the [[*Contribute][Contribute]] section. 

* Contribute
- If you have any ideas or suggestions on how to improve Star Tabs, don't hesitate to let me know (either through email or by raising an issue on Github).
- If you find a bug, file a report by raising an issue on Github.
- In case you want to contribute with code, please fork the develop branch and create a pull request.
